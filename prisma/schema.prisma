generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  branchId          String             @id @default(uuid())
  branchName        String
  courseUndertaken CourseUndertaken[]

  @@map("branch")
}

model Course {
  courseId          String             @id @default(uuid())
  courseName        String
  courseUndertaken CourseUndertaken[]

  @@map("course")
}

model CourseUndertaken {
  courseObjId String       @id @default(uuid())
  courseId    String
  teacherId   String
  branchId    String
  year        Int
  semester    semesterenum
  section     String       @db.Char(1)

  branch  Branch  @relation(fields: [branchId], references: [branchId], onDelete: Cascade, onUpdate: Cascade, map: "fk_branchid")
  course  Course  @relation(fields: [courseId], references: [courseId], onDelete: Cascade, onUpdate: Cascade, map: "fk_courseid")
  teacher Teacher @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, onUpdate: Cascade, map: "fk_teacherid")

  @@map("courseUndertaken")
}



model Student {
  studentId       String          @id @default(uuid())
  name            String
  email           String          @unique
  usn             String          @unique @db.VarChar(10)
  password        String
  studentDetails StudentDetails?

  @@map("student")
}

model StudentDetails {
  studentId       String      @id
  age             String?
  gender          genderenum?
  address         String?
  yearOfAdmission Int?
  phNo            String?     @db.VarChar(10)
  student         Student     @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade, map: "fk_studentid")

  @@map("studentDetails")
}

model Teacher {
  teacherId         String             @id @default(uuid())
  name              String
  email             String             @unique
  employeeId        String             @unique
  password          String?
  courseUndertaken CourseUndertaken[]
  teacherDetails   TeacherDetails?

  @@map("teacher")
}

model TeacherDetails {
  teacherId     String      @id
  age           String?
  gender        genderenum?
  address       String?
  yearOfJoining Int
  phNo          String?     @db.VarChar(10)
  teacher       Teacher     @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, onUpdate: Cascade, map: "fk_teacherid")

  @@map("teacherDetails")
}

enum genderenum {
  Male
  Female
}

enum semesterenum {
  a1
  a2
  a3
  a4
  a5
  a6
  a7
  a8
}
